package marketfeed

//Trade needs to be able to call environment variables for bitfenix api use and be able to pass into payload for POST request to make a trade on platform
// with x amount of bitcoin for today
// will need to be inserted to db (dear god it better be)
// will need to perform trade function after scripts pass okay
import (
	"bytes"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"

	bitfinex "github.com/bitfinexcom/bitfinex-api-go"
)

const (
	COINBASE_API_ENDPOINT = "https://api.coinbase.com/v2/"
)

type Wallet struct {
	Type              string
	Currency          string
	Balance           float64
	UnsettledInterest float64
	BalanceAvailable  float64
}

// CoinbaseAPIKeyAuth Struct implements the Authentication interface and takes
// care of authenticating RPC requests for clients with a Key & Secret pair
type CoinbaseAPIKeyAuth struct {
	APIKey     string
	httpClient *http.Client
}

type CoinbasePurchase struct {
	ID            string `json:"id"`
	Status        string `json:"status"`
	PaymentMethod struct {
		ID           string `json:"id"`
		Resource     string `json:"resource"`
		ResourcePath string `json:"resource_path"`
	} `json:"payment_method"`
	Transaction struct {
		ID           string `json:"id"`
		Resource     string `json:"resource"`
		ResourcePath string `json:"resource_path"`
	} `json:"transaction"`
	Amount struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"amount"`
	Total struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"total"`
	Subtotal struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"subtotal"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    string    `json:"updated_at"`
	Resource     string    `json:"resource"`
	ResourcePath string    `json:"resource_path"`
	Committed    bool      `json:"committed"`
	Instant      bool      `json:"instant"`
	Fee          struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"fee"`
	PayoutAt string `json:"payout_at"`
}

type CoinbaseSell struct {
	ID            string `json:"id"`
	Status        string `json:"status"`
	PaymentMethod struct {
		ID           string `json:"id"`
		Resource     string `json:"resource"`
		ResourcePath string `json:"resource_path"`
	} `json:"payment_method"`
	Transaction struct {
		ID           string `json:"id"`
		Resource     string `json:"resource"`
		ResourcePath string `json:"resource_path"`
	} `json:"transaction"`
	Amount struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"amount"`
	Total struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"total"`
	Subtotal struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"subtotal"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    string    `json:"updated_at"`
	Resource     string    `json:"resource"`
	ResourcePath string    `json:"resource_path"`
	Committed    bool      `json:"committed"`
	Instant      bool      `json:"instant"`
	Fee          struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"fee"`
	PayoutAt string `json:"payout_at"`
}

type PaymentMethodResource struct {
	ID            string    `json:"id"`
	Type          string    `json:"type"`
	Name          string    `json:"name"`
	Currency      string    `json:"currency"`
	PrimaryBuy    bool      `json:"primary_buy"`
	PrimarySell   bool      `json:"primary_sell"`
	AllowBuy      bool      `json:"allow_buy"`
	AllowSell     bool      `json:"allow_sell"`
	AllowDeposit  bool      `json:"allow_deposit"`
	AllowWithdraw bool      `json:"allow_withdraw"`
	InstantBuy    bool      `json:"instant_buy"`
	InstantSell   bool      `json:"instant_sell"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     string    `json:"updated_at"`
	Resource      string    `json:"resource"`
	ResourcePath  string    `json:"resource_path"`
}

type AccountReceiveAddress struct {
	Success     bool
	Address     string
	CallbackUrl string `json:"callback_url"`
}

func (c *CoinbaseAPIKeyAuth) Get(api_method string, params url.Values) ([]byte, error) {
	// Build HTTP client
	if c.httpClient == nil {
		c.httpClient = &http.Client{}
	}

	apiURL := COINBASE_API_ENDPOINT + api_method

	if params == nil {
		params = url.Values{}
	}

	if c.APIKey != "" {
		params.Set("api_key", c.APIKey)
	}

	apiURL = apiURL + "/?" + params.Encode()

	bv := []byte(time.Now().Format("20060102") + "GET" + apiURL)
	hasher := sha256.New()
	hasher.Write(bv)
	sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
	fmt.Printf("sha256 code %s", sha)
	apiURL = apiURL + sha
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		return nil, err
	}

	// Make the request
	return c.makeRequest(req)
}

// The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using the secret key on the prehash string timestamp + method + requestPath + body
func (c *CoinbaseAPIKeyAuth) makeRequest(req *http.Request) ([]byte, error) {
	req.Header.Set("CB-ACCESS-KEY", c.APIKey)
	req.Header.Set("CB-VERSION", time.Now().Format("20060102"))
	req.Header.Set("CB-ACCESS-TIMESTAMP", "2017-03-27")
	bv := []byte(time.Now().Format("20060102") + "GET" + req.URL.String())
	hasher := sha256.New()
	hasher.Write(bv)
	sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
	req.Header.Set("CB-ACCESS-SIGN", sha)
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	fmt.Println(req)

	// Make sure we close the body stream no matter what
	defer resp.Body.Close()

	// Read body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	//fmt.Println(string(body))

	// Check status code
	if resp.StatusCode != 200 {
		fmt.Println(string(body))
		return nil, fmt.Errorf("Invalid HTTP response code: %d", resp.StatusCode)
	}

	// Return
	return body, nil
}

func (c *CoinbaseAPIKeyAuth) PostJSON(api_method string, params map[string]interface{}) ([]byte, error) {
	// Build HTTP client
	if c.httpClient == nil {
		c.httpClient = &http.Client{}
	}

	apiURL := COINBASE_API_ENDPOINT + api_method

	if params == nil {
		params = make(map[string]interface{}, 1)
	}

	if c.APIKey != "" {
		params["api_key"] = c.APIKey
	}

	var req *http.Request
	var err error
	postBody, err := json.Marshal(params)
	if err != nil {
		return nil, err
	}

	req, err = http.NewRequest("POST", apiURL, bytes.NewReader(postBody))
	if err != nil {
		return nil, err
	}

	// Make the request
	req.Header.Set("Content-type", "application/json")
	return c.makeRequest(req)
}

func (c *CoinbaseAPIKeyAuth) PostForm(api_method string, params url.Values) ([]byte, error) {
	// Build HTTP client
	if c.httpClient == nil {
		c.httpClient = &http.Client{}
	}

	apiURL := COINBASE_API_ENDPOINT + api_method

	if params == nil {
		params = url.Values{}
	}

	if c.APIKey != "" {
		params.Set("api_key", c.APIKey)
	}

	req, err := http.NewRequest("POST", apiURL, strings.NewReader(params.Encode()))
	if err != nil {
		return nil, err
	}

	// Make the request
	return c.makeRequest(req)
}

func (c *CoinbaseAPIKeyAuth) GetAccountBalance() (bal float64, err error) {
	body, err := c.Get("accounts", nil)

	if err != nil {
		return 0, err
	}

	err = json.Unmarshal(body, &bal)

	if err != nil {
		return 0, err
	}

	return bal, nil
}

func (c *CoinbaseAPIKeyAuth) GetAccountReceiveAddress() (response *AccountReceiveAddress, err error) {
	body, err := c.Get("account/receive_address", nil)

	if err != nil {
		return nil, err
	}

	// parse into json
	err = json.Unmarshal(body, &response)

	if err != nil {
		return nil, err
	}

	return response, nil
}

//Trade needs to be able to call environment variables for bitfenix api use and be able to pass into payload for POST request to make a trade on platform
// with x amount of bitcoin for today
// will need to be inserted to db (dear god it better be)
// will need to perform trade function after scripts pass okay

func ConnectToMarginAccount() {
	key := os.Getenv("BFX_API_KEY")
	secret := os.Getenv("BFX_API_SECRET")
	client := bitfinex.NewClient().Auth(key, secret)

	info, err := client.Account.Info()
	if err != nil {
		fmt.Println("Error ", err)
	}

	fmt.Println("BFX INFO", info)
}
